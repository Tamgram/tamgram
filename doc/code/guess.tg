builtins := multiset

apred Neq/2
apred Eq/2

restriction Inequality =
  All x y #i. Neq(x, y) @ i ==> not(x = y)

restriction Equality =
  All x y #i. Eq(x,y) @ i ==> x = y

apred RightGuess/1

process GuessingGame =
  "Output some possible answers":
  []-->[Out(<"A", "B", "C", "F">)];
  
  "Some persistent states":
  []-->
  [ 'try_count := "0"
  , 'correct_answer := "F"
  , 'answer := "NULL" ];
  
  while not ('answer cas 'correct_answer) {
    [ In(x) ]-->
    [ 'answer := x
    , 'try_count := 'try_count + "1" ]
  };
  
  []--[ RightGuess('try_count) ]-->[ ]

lemma at_least_one_guess =
  All x #i.
    RightGuess(x)@i ==> not (x = "0")

lemma possibly_2_guesses =
  exists-trace
  Ex #i.
    RightGuess(("0"+"1")+"1")@i

lemma eventually_right_guess =
  exists-trace
  Ex x #i.
    RightGuess(x) @ i
