import Symbols
open Symbols
import Encryption_layer

apred SupplicantReceivesM1 (
  suppThreadID,
  suppID,
  PMK,
  authThreadID,
  PTK,
  GTK,
  ANonce,
  SNonce,
  ctr_m1,
)

apred SupplicantSeesCounter (
  suppThreadID,
  PMK,
  ctr,
)

apred SupplicantReceivesM1Again (
  suppThreadID,
  suppID,
  PMK,
  authThreadID,
  PTK,
  GTK,
  ANonce,
  SNonce,
  ctr_m3,
)

apred SupplicantReceivesM3/9
apred SupplicantReceivesM3Again/9
apred SupplicantGroupKeyRekey/10

apred SeesNonceForPTK (
  ptkID,
  receiverThreadID,
  PTK,
  nonce,
)

apred SeesNonceForGTK (
  keyID,
  receiverThreadID,
  groupKey,
  nonce,
)

apred ReadUnique/2
apred AllocateUnique/2

apred Free/1
apred Read/1

builtins := symmetric-encryption, multiset

equation sndec =
  All message key nonce .
    sndec(snenc(message, key, nonce), key) = message

module Restrictions = {
  module E = Encryption_layer

  restriction Neq =
      All x y #i. Neq(x, y) @ i ==> not(x = y)

  restriction Equality =
      All x y #i. Eq(x,y) @ i ==> x = y

  restriction MessagesAreSentInEnqueueOrder =
       All senderThreadID messageID1 messageID2 #i1 #j1 #i2 #j2.
       E.EnqueueMessage(senderThreadID, messageID1) @ i1 &
       E.EnqueueMessage(senderThreadID, messageID2) @ j1 &
       E.SendMessage(senderThreadID, messageID1) @ i2 &
       E.SendMessage(senderThreadID, messageID2) @ j2 &
       #i1 < #j1
       ==> #i2 < #j2

  // According to the standard, the supplicant only accepts messages 1 and 3 if 
  // it hasn't seen their replay counters before.
  restriction ReplayCounterM1 =
       All suppThreadID suppID PMK authThreadID PTK GTK ANonce SNonce ctr_m1 #i.
       SupplicantReceivesM1(suppThreadID, suppID, PMK, authThreadID, PTK, 
                            GTK, ANonce, SNonce, ctr_m1) @ i
       ==> not Ex #j. j < i & 
                      SupplicantSeesCounter(suppThreadID, PMK, ctr_m1) @ j

  restriction ReplayCounterM1Again =
     All suppThreadID suppID PMK authThreadID PTK GTK ANonce SNonce ctr_m1 #i.
     SupplicantReceivesM1Again(suppThreadID, suppID, PMK, authThreadID, PTK, 
                                 GTK, ANonce, SNonce, ctr_m1) @ i
       ==> not Ex #j. j < i & 
                      SupplicantSeesCounter(suppThreadID, PMK, ctr_m1) @ j

  restriction ReplayCounterM3 =
       All suppThreadID suppID PMK authThreadID PTK ANonce SNonce GTK ctr_m3 #i.
       SupplicantReceivesM3(suppThreadID, suppID, PMK, authThreadID, PTK, 
                            GTK, ANonce, SNonce, ctr_m3) @ i
       ==> not Ex #j. j < i & 
                      SupplicantSeesCounter(suppThreadID, PMK, ctr_m3) @ j

  restriction ReplayCounterM3Again =
       All suppThreadID suppID PMK authThreadID PTK GTK ANonce SNonce ctr_m3 #i.
       SupplicantReceivesM3Again(suppThreadID, suppID, PMK, authThreadID, PTK, 
                                 GTK, ANonce, SNonce, ctr_m3) @ i
       ==> not Ex #j. j < i & 
                      SupplicantSeesCounter(suppThreadID, PMK, ctr_m3) @ j

  restriction ReplayCounterGroupKeyRekey =
       All suppThreadID suppID PMK authThreadID PTK oldGTK newGTK ANonce SNonce ctr #i.
       SupplicantGroupKeyRekey(suppThreadID, suppID, PMK, authThreadID, PTK, 
                               oldGTK, newGTK, ANonce, SNonce, ctr) @ i
       ==> not Ex #j. j < i & 
                      SupplicantSeesCounter(suppThreadID, PMK, ctr) @ j

  restriction ReplayCounterPairwiseMessages =
       All ptkID receiverThreadID senderID PTK n1 n2 frameType #i #j.
       SeesNonceForPTK(ptkID, receiverThreadID, PTK, 
                       <N(n1), senderID, frameType>) @ i &
       SeesNonceForPTK(ptkID, receiverThreadID, PTK, 
                       <N(n2), senderID, frameType>) @ j & 
       i < j
       ==>  Ex z. n1 + z = n2

  restriction ReplayCounterGroupPayload =
       All keyID receiverThreadID senderID groupKey n1 n2 #i #j.
       SeesNonceForGTK(keyID, receiverThreadID, groupKey, <N(n1), senderID>) @ i &
       SeesNonceForGTK(keyID, receiverThreadID, groupKey, <N(n2), senderID>) @ j & 
       i < j
       ==>  Ex z. n1 + z = n2

  restriction MemoryCanBeFreedOnlyOnce =
      All pointer #i #j. Free(pointer) @ i & Free(pointer) @ j ==> #i = #j

  restriction FreedMemoryCannotBeAccessed =
      All pointer #i #j. Read(pointer) @ i & Free(pointer) @ j ==> i < j 

  restriction FreedUniqueMemoryCannotBeAccessed =
       All pointer owner #i #j. ReadUnique(pointer, owner) @ i & 
       Free(pointer) @ j ==> i < j

  restriction UniqueMemoryMustBeUnique =
       All pointer1 owner #i #j. 
       AllocateUnique(pointer1, owner) @ i &
       ReadUnique(pointer1, owner) @ j
       ==> i < j & 
           not(Ex pointer2 #k. i < k & k < j & 
               AllocateUnique(pointer2, owner) @ k)
}

module Setup = {
  process Supp_Create =
      [ Fr(~suppID) ]
    --[ SupplicantCreated(~suppID) ]->
      [ !Supplicant(~suppID)
      , Out(~suppID) ] // We view the ID as the MAC address, so publish it

  process Auth_Create =
      [ Fr(~authID)
      , Fr(~pointerGTKState)
      , Fr(~x) ]
    --
      let gtk4 = GTK(~x) in
      let gtkNonce = <N("1"), ~authID> in
      let gtk4Data = <gtk4, gtkNonce, "4"> in
      let installedGTKData = gtk4Data in
      let shareGTKData = gtk4Data in
      [ AuthenticatorCreated(~authID)
      , AuthenticatorInstalledGTK(~authID, installedGTKData)
      , AuthenticatorSetsShareGTK(~authID, shareGTKData)
      , AllocateUnique(~pointerGTKState, ~authID)
      ]
    ->[ !Authenticator(~authID)
      , !AuthGTKState(~authID, "SETKEYSDONE", installedGTKData, shareGTKData,
                      ~pointerGTKState)
      , AuthInstalledGTK(~authID, installedGTKData)
      , Out(~authID) ]

  process Auth_Associate_With_Supp =
      [ Fr(~PMK)
      , Fr(~authThreadID)
      , Fr(~suppThreadID)
      , Fr(~authReceiverPtkID)
      , Fr(~suppReceiverPtkID)
      , Fr(~pointerAuthPTK)
      , Fr(~pointerSuppPTK)
      , Fr(~nullGTKID)
      , !Authenticator(~authID)
      , !Supplicant(~suppID) ]
    --
      let ctr_start = S("0") in
      let initialPTK = kNullPTK() in
      let initialSuppGTKData = <kNullGTK(), kNullGTKNonce(), kNullGTKIndex()> in
      [ Init(~PMK)
      , Associate(~authID, ~authThreadID, ~suppID, ~suppThreadID, ~PMK) ]->
      [ AuthState(~authThreadID, 'INIT_R1_SA', <~authID, ~PMK, ~suppThreadID, initialPTK, 
                  'NULL_ANonce', 'NULL_SNonce', ctr_start>)
      , SuppState(~suppThreadID, 'INIT_R1_SA', 
                  <~suppID, ~PMK, ~authThreadID, initialPTK, initialSuppGTKData, 
                   'NULL_ANonce', 'NULL_SNonce', S('NULL')>)
      , !PairwiseMasterKey(~PMK, ~authID, ~authThreadID, ~suppID, ~suppThreadID)
      , !AuthReceiverPTK(~authReceiverPtkID, ~authThreadID, ~authID, initialPTK,
                         ~pointerAuthPTK)
      , !SuppReceiverPTK(~suppReceiverPtkID, ~suppThreadID, ~suppID, initialPTK, 
                         ~pointerSuppPTK)
      , ReceiverGTK(~suppThreadID, ~nullGTKID, ~PMK,
                    kNullGTK, kNullGTKNonce, kNullGTKIndex)
      , Out(~authThreadID)
      , Out(~suppThreadID) ]
}

process receiveGTKEncryptedPayload =
    [ In(snenc(<'data', $message>, GTK(x) as GTK, <N(m), senderID> as incomingNonce))
    , ReceiverGTK(~receiverThreadID, ~keyID, ~PMK,
                  GTK(x), <N(n), senderID> as lastNonce, $index) ]
  --
    [ ReceiveGTKEncryptedPayload(~keyID, ~receiverThreadID, ~PMK,
                                  GTK, incomingNonce)
    , SeesNonceForGTK(~keyID, ~receiverThreadID,
                      GTK, incomingNonce)
    , Neq($index, kNullGTKIndex()) ]
  ->
    [ ReceiverGTK(~receiverThreadID, ~keyID, ~PMK, 
                  GTK, incomingNonce, $index) ]

// We have two rules for sending GTK encrypted payloads to distinguish between
// the case where the installed GTK is also the share GTK and the case 
// where the two GTKs are different.
process sendGTKEncryptedPayload_1 =
    [ AuthInstalledGTK(~authID, installedGTKData) 
    , !AuthGTKState(~authID, stateIdentifier, installedGTKData, shareGTKData,
                    ~oldPointerGTKState)
    , Fr(~newPointerGTKState)
    ]
  --
    [ EncryptedWithGTK(~authID, newGTKData, newShareGTKData)
    , AuthenticatorUsesGTK(~authID, newGTKData, shareGTKData)
    , SendGTKEncryptedPayload(~authID, newGTKData, newShareGTKData)
    , AllocateUnique(~newPointerGTKState, ~authID)
    , Free(~oldPointerGTKState)
    ]
  ->
    [ Out(snenc(<'data', $message>, installedGTK, newGTKNonce))
    , AuthInstalledGTK(~authID, newGTKData) 
    , !AuthGTKState(~authID, stateIdentifier, newGTKData, newGTKData, 
                    ~newPointerGTKState)
    ]

process sendGTKEncryptedPayload_2 =
    let
        newGTKData = <installedGTK, newGTKNonce, $index>
	in
    [ AuthInstalledGTK(~authID, GTK(~x) as installedGTKData)
    , !AuthGTKState(~authID, stateIdentifier,
                    <
		     installedGTK,
		     <N(n), ~authID> as installedGTKNonce,
		     $index
		    > as installedGTKData,
		    <shareGTK, shareGTKNonce, $shareIndex> as shareGTKData,
                    ~oldPointerGTKState)
    , Fr(~newPointerGTKState) ]
  --
    let newGTKNonce = <N(n+'1'), ~authID> in
    let newGTKData = <installedGTK, newGTKNonce, $index> in
    [ EncryptedWithGTK(~authID, newGTKData, shareGTKData)
    , AuthenticatorUsesGTK(~authID, newGTKData, shareGTKData)
    , SendGTKEncryptedPayload(~authID, newGTKData, shareGTKData)
    , AllocateUnique(~newPointerGTKState, ~authID)
    , AllocateUnique(~newPointerGTKState, ~authID)
    , Free(~oldPointerGTKState)
    , Neq(installedGTK, shareGTK)
    ]
  ->
    [ Out(snenc(<'data', $message>, installedGTK, newGTKNonce))
    , AuthInstalledGTK(~authID, newGTKData)
    , !AuthGTKState(~authID, stateIdentifier, newGTKData, shareGTKData,
                    ~newPointerGTKState)
    ]
