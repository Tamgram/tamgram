theory KCL07 begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



/* looping facts with injective instances: St/3 */

rule (modulo E) Setup_23:
   [ Fr( ~k_21 ), Fr( ~id_22 ) ]
  --[ OnlyOnce_18( ) ]->
   [ !Reader_19( ~k_21, ~id_22 ), !Tag_20( ~k_21, ~id_22 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TgStartreader_32_1:
   [ Fr( ~pid ) ] --> [ St( ~pid, 'tgk1', 'empty_tuple' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TgRulereader_32_1to2:
   [ St( ~pid, 'tgk1', 'empty_tuple' ), Fr( ~r1_27 ) ]
  --[ Challenge_24( ~r1_27, 'Reader' ) ]->
   [ St( ~pid, 'tgk2', ~r1_27 ), Out( ~r1_27 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TgRulereader_32_2to3:
   [
   St( ~pid, 'tgk2', ~u_tgany0_31 ), !Reader_19( ~k_29, ~id_30 ),
   In( xoredhash_28 )
   ]
  --[
  Alive_25( ~k_29, 'Tag' ),
  Eq_26( xoredhash_28, (~id_30⊕h(<~u_tgany0_31, ~k_29>)) )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) tag_38:
   [ In( r1_35 ), Fr( ~r2_34 ), !Tag_20( ~k_36, ~id_37 ) ]
  --[ Response_33( ~k_36, 'Tag' ) ]->
   [ Out( <(~id_37⊕~r2_34), (~r2_34⊕h(<r1_35, ~k_36>))> ) ]

  /*
  rule (modulo AC) tag_38:
     [ In( r1_35 ), Fr( ~r2_34 ), !Tag_20( ~k_36, ~id_37 ) ]
    --[ Response_33( ~k_36, 'Tag' ) ]->
     [ Out( <z, (~r2_34⊕h(<r1_35, ~k_36>))> ) ]
    variants (modulo AC)
    1. ~id_37
             = ~id_37.17
       ~r2_34
             = ~id_37.17
       z     = zero
    
    2. ~id_37
             = ~id_37.17
       ~r2_34
             = ~r2_34.19
       z     = (~id_37.17⊕~r2_34.19)
  */

restriction equality:
  "∀ x_39 y_40 #i_41. (Eq_26( x_39, y_40 ) @ #i_41) ⇒ (x_39 = y_40)"
  // safety formula

restriction unique:
  "∀ #i_43 #j_44.
    ((OnlyOnce_18( ) @ #i_43) ∧ (OnlyOnce_18( ) @ #j_44)) ⇒ (#i_43 = #j_44)"
  // safety formula

lemma recentalive_tag:
  all-traces
  "∀ x_46 #i_47.
    (Alive_25( x_46, 'Tag' ) @ #i_47) ⇒
    (∃ y_48 #j_49 #k_50.
      (((Challenge_24( y_48, 'Reader' ) @ #k_50) ∧
        (Response_33( x_46, 'Tag' ) @ #j_49)) ∧
       (#k_50 < #j_49)) ∧
      (#j_49 < #i_47))"
/*
guarded formula characterizing all counter-examples:
"∃ x_46 #i_47.
  (Alive_25( x_46, 'Tag' ) @ #i_47)
 ∧
  ∀ y_48 #j_49 #k_50.
   (Challenge_24( y_48, 'Reader' ) @ #k_50) ∧
   (Response_33( x_46, 'Tag' ) @ #j_49)
  ⇒
   ((¬(#k_50 < #j_49)) ∨ (¬(#j_49 < #i_47)))"
*/
by sorry

lemma executable:
  exists-trace
  "∃ x_52 #i_53 #j_54.
    ((Alive_25( x_52, 'Tag' ) @ #i_53) ∧
     (Response_33( x_52, 'Tag' ) @ #j_54)) ∧
    (¬(∃ #k_55. (Response_33( x_52, 'Tag' ) @ #k_55) ∧ (¬(#j_54 = #k_55))))"
/*
guarded formula characterizing all satisfying traces:
"∃ x_52 #i_53 #j_54.
  (Alive_25( x_52, 'Tag' ) @ #i_53) ∧ (Response_33( x_52, 'Tag' ) @ #j_54)
 ∧
  ∀ #k_55. (Response_33( x_52, 'Tag' ) @ #k_55) ⇒ #j_54 = #k_55"
*/
simplify
solve( St( ~pid, 'tgk2', ~u_tgany0_31 ) ▶₀ #i_53 )
  case TgRulereader_32_1to2
  solve( !Reader_19( ~k_29, ~id_30 ) ▶₁ #i_53 )
    case Setup_23
    solve( !Tag_20( ~k_29, ~id_37 ) ▶₂ #j_54 )
      case Setup_23
      solve( splitEqs(1) )
        case split
        solve( !KU( (~id_30⊕h(<~u_tgany0_31, ~k_29>)) ) @ #vk )
          case coerce
          solve( !KD( (~id_30⊕h(<~u_tgany0_31, ~k_29>)) ) ▶₀ #vk )
            case tag_38
            solve( (#vl, 0) ~~> (#vk, 0) )
              case d_0_fst
              solve( !Tag_20( ~k_36, ~id_37 ) ▶₂ #vr.3 )
                case Setup_23
                solve( (#vr.3, 0) ~~> (#vk, 0) )
                  case d_xor_case_1
                  solve( (#vr.4, 0) ~~> (#vk, 0) )
                    case Xor
                    solve( !KU( (~r2_34⊕h(<~u_tgany0_31, ~k_29>)) ) @ #vk.2 )
                      case coerce
                      solve( !KD( (~r2_34⊕h(<~u_tgany0_31, ~k_29>)) ) ▶₀ #vk.1 )
                        case tag_38
                        solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                          case d_0_snd
                          solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                            case Xor
                            solve( !KU( ~u_tgany0_31 ) @ #vk.2 )
                              case TgRulereader_32_1to2
                              SOLVED // trace found
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end