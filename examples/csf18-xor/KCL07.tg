builtins := xor, hashing

/*
KCL07: Reader R, RFID tag T, shared knowledge k, ID

   R: knows(k, ID)
   T: knows(k, ID)
   R: fresh(r1)
R->T: r1
   T: fresh(r2)
T->R: ID XOR r2,  h(r1,k) XOR r2  
   
   R considers T recent alive if it can find ID, k such that
     the pair of terms received from T in the last step satisfies
     
     ID XOR r2  XOR  h(r1,k) XOR r2   =   ID XOR h(r1,k)

recent aliveness is satisfied, but untracability is not.
The model below only considers recent aliveness at the moment.
*/

apred OnlyOnce/0
pred !Reader/2
pred !Tag/2

process Setup =
   [ Fr( ~k )
   , Fr(~id) 
   ]
 --[ OnlyOnce( ) ]-> 
   [ !Reader( ~k, ~id )
   , !Tag( ~k, ~id ) 
   ]

apred Challenge/2
apred Alive/2
apred Eq/2

process reader =
   [ Fr( ~r1 ) ]
 --[ Challenge( ~r1, "Reader" ) ]->
   [ Out( ~r1 )
   , 'r1 := r1
   ];
   [ !Reader( ~k, ~id )
//   , In( <idr2, hashr2> ) // This is how it should be
   , In( xoredhash )        // This is the only way I can make it work
   ]
 --[ Alive( ~k, "Tag" )
//   , Eq( idr2 XOR hashr2, ~id XOR h(<~r1,~k>) ) // How it should be
   , Eq( xoredhash, ~id XOR h(<'r1,~k>) )  // how it works
   ]->
   []

apred Response/2

process tag =
   [ In( r1 )
   , Fr( ~r2 )
   , !Tag( ~k, ~id ) ]
 --[ Response( ~k, "Tag" )
   ]->
   [ Out( <~id XOR ~r2, h(<r1,~k>) XOR ~r2>)
   ]

restriction equality =
  All x y #i. (Eq( x, y ) @ #i) ==> (x = y)

restriction unique =
  All #i #j. ((OnlyOnce( ) @ #i) & (OnlyOnce( ) @ #j)) ==> (#i = #j)

// PROOF FOUND AUTOMATICALLY
lemma recentalive_tag =
  all-traces
  All x #i. (Alive( x, "Tag" ) @ #i) ==> (Ex y #j #k. Challenge(y, "Reader") @k & Response( x, "Tag" ) @ #j & k < j & j < i)


// SHOWS CORRECT EXECUTION
lemma executable =
  exists-trace
  Ex x #i #j. (Alive( x, "Tag" ) @ #i) & (Response( x, "Tag" ) @ #j)
     // further restriction to automatically get the desired execution
     & (not Ex #k. Response( x, "Tag" ) @ #k & (not (#j=#k)))

