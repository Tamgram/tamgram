/*
1.  A   ->  S   :   A,B
2.  S   ->  A   :   {KPb, B}KSs
3.  A   ->  B   :   {Na, A}KPb
4.  B   ->  S   :   B,A
5.  S   ->  B   :   {KPa, A}KSs
6.  B   ->  A   :   {Na, Nb}KPa
7.  A   ->  B   :   {Nb}KPb
*/

builtins := symmetric-encryption, asymmetric-encryption

pred !Setup_A(named KSa, named KPa, named KSs)
pred !Setup_B(named KSb, named KPb, named KSs)
pred !Setup_S(named KPa, named KPb, named KSs)

pred !Key_pair/2

apred A_end/4
apred B_end/4
apred Test0/0
apred Test1/0
apred Test2/0

lemma sanity_check0 =
  exists-trace
  Ex A B Na Nb #i.
    A_end(A, B, Na, Nb) @i

lemma sanity_check1 =
  exists-trace
  Ex Na Nb #i.
    B_end("A", "B", Na, Nb) @i

lemma sanity_check_Test0 =
  exists-trace
  Ex #i .
    Test0() @i

lemma sanity_check_Test1 =
  exists-trace
  Ex #i .
    Test1() @i

lemma sanity_check_Test2 =
  exists-trace
  Ex #i .
    Test2() @i

lemma B_agrees_with_A =
  All Na Nb #i.
    B_end("A", "B", Na, Nb) @ i ==> (
      Ex #j . A_end("A", "B", Na, Nb) @ j & j < i
    )

apred Only_once/0

restriction only_once =
  All #i #j.
    Only_once() @i & Only_once() @j ==> #i = #j

process setup =
  [ Fr(~KSa)
  , Fr(~KSb)
  , Fr(~KSs)
  , Fr(~KSi) ]
--[ Only_once() ]->
  let KPa = pk(KSa) in
  let KPb = pk(KSb) in
  let KPi = pk(KSi) in
  [ !Setup_A(KSa is ., KPa is ., KSs is .)
  , !Setup_B(KSb is ., KPb is ., KSs is .)
  , !Setup_S(KPa is ., KPb is ., KSs is .)
  , !Key_pair("A", KPa)
  , !Key_pair("B", KPb)
  , !Key_pair("I", KPi)
  , Out(KPa)
  , Out(KPb)
  , Out(KSi)
  , Out(KPi)
  ]

process A =
  [ !Setup_A(KSa is ., KPa is ., KSs is .) ]
  ->
  [ 'KSs := .
  , 'KSa := .
  , 'KPa := . ];

  /* Let Intruder decide communication target */
  [ In(dst) ]->[ 'dst := . ];

  /* 1. */
  []->[ Out(<"A", 'dst>) ];

  /* 2. */
  [ In(senc(<KPdst, 'dst>, 'KSs)) ]->[ 'KPdst := . ];

  /* 3. */
  [ Fr(~Na) ]
  ->
  [ 'Na := .
  , Out(aenc(<Na, 'dst>, 'KPdst)) ];

  /* 6. */
  [ In(m) ]->[ 'm := adec(m, 'KSa) ];
  [ 'm cas <'Na, Ndst> ]->[ 'Ndst := . ];

  /* 7. */
  []--[ A_end("A", 'dst, 'Na, 'Ndst) ]->[ Out(aenc('Ndst, 'KPdst)) ]

process B =
  [ !Setup_B(KSb is ., KPb is ., KSs is .) ]
  ->
  [ 'KSs := .
  , 'KSb := .
  , 'KPb := . ];

  /* Let Intruder decide communication target */
  [ In(dst) ]->[ 'dst := . ];

  /* 3. */
  [ In(m) ]--[ Test0() ]->[ 'm := adec(m, 'KSb) ];
  [ 'm cas <Ndst, 'dst> ]--[ Test1() ]->[ 'Ndst := . ];

  /* 4. */
  []->[ Out(<"B", 'dst>) ];

  /* 5. */
  [ In(senc(<KPdst, 'dst>, 'KSs)) ]--[ Test2() ]->[ 'KPdst := . ];

  /* 6. */
  [ Fr(~Nb) ]
  ->
  [ 'Nb := .
  , Out(aenc(<'Ndst, Nb>, 'KPdst)) ];

  /* 7. */
  [ In(aenc('Nb, 'KPb)) ]
--[ B_end('dst, "B", 'Ndst, 'Nb) ]->
  [  ]

process S =
  [ !Setup_S(KPa is ., KPb is ., KSs is .) ]
  ->
  [ 'KSs := .
  , 'KPa := .
  , 'KPb := . ];

  loop {
    [ In(<src, dst>), !Key_pair(dst, pk) ]
    ->
    [ Out(senc(<pk, dst>, 'KSs)) ]
  }
