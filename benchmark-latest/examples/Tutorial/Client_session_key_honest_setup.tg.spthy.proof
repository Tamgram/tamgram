theory Tutorial begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, fst/1, h/1, pair/2, pk/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2



/* looping facts with injective instances: StF/3 */

rule (modulo E) Register_pk_23:
   [ Fr( ~ltk_22 ) ]
  -->
   [ !Ltk_20( $A, ~ltk_22 ), !Pk_21( $A, pk(~ltk_22) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Get_pk_26:
   [ !Pk_21( A_25, pk ) ] --> [ Out( pk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk_30:
   [ !Ltk_20( A_29, ltk_28 ) ]
  --[ LtkReveal_27( A_29 ) ]->
   [ Out( ltk_28 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_34_3to4:
   [ Fr( ~pid ) ] --> [ StF( ~pid, 'tgk4', 'empty_tuple' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_34_manyto4to5:
   [ StF( ~pid, 'tgk4', 'empty_tuple' ), Fr( ~k_33 ), !Pk_21( $S, pkS_32 ) ]
  -->
   [ StF( ~pid, 'tgk5', <~k_33, $S> ), Out( aenc(<'1', ~k_33>, pkS_32) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_34_manyto5:
   [ StF( ~pid, 'tgk5', <tgc_k_0, tgc_server_0> ), In( h(tgc_k_0) ) ]
  --[ SessKeyC_31( tgc_server_0, tgc_k_0 ) ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Serv_1_39:
   [ !Ltk_20( $S, ~ltkS_38 ), In( request_37 ) ]
  --[
  Eq_35( fst(adec(request_37, ~ltkS_38)), '1' ),
  AnswerRequest_36( $S, snd(adec(request_37, ~ltkS_38)) )
  ]->
   [ Out( h(snd(adec(request_37, ~ltkS_38))) ) ]

  /*
  rule (modulo AC) Serv_1_39:
     [ !Ltk_20( $S, ~ltkS_38 ), In( request_37 ) ]
    --[ Eq_35( z.1, '1' ), AnswerRequest_36( $S, z ) ]->
     [ Out( h(z) ) ]
    variants (modulo AC)
    1. ~ltkS_38
             = ~ltkS_38.7
       request_37
             = request_37.8
       z     = snd(adec(request_37.8, ~ltkS_38.7))
       z.1   = fst(adec(request_37.8, ~ltkS_38.7))
    
    2. ~ltkS_38
             = ~ltkS_38.8
       request_37
             = aenc(x.13, pk(~ltkS_38.8))
       z     = snd(x.13)
       z.1   = fst(x.13)
    
    3. ~ltkS_38
             = ~ltkS_38.9
       request_37
             = aenc(<z.12, z.11>, pk(~ltkS_38.9))
       z     = z.11
       z.1   = z.12
  */

restriction Equality_Checks_Succeed:
  "∀ x_40 y_41 #i_42. (Eq_35( x_40, y_41 ) @ #i_42) ⇒ (x_40 = y_41)"
  // safety formula

lemma Client_session_key_secrecy:
  all-traces
  "¬(∃ S_44 k_45 #i_46 #j_47.
      ((SessKeyC_31( S_44, k_45 ) @ #i_46) ∧ (K( k_45 ) @ #j_47)) ∧
      (¬(∃ #r_48. LtkReveal_27( S_44 ) @ #r_48)))"
/*
guarded formula characterizing all counter-examples:
"∃ S_44 k_45 #i_46 #j_47.
  (SessKeyC_31( S_44, k_45 ) @ #i_46) ∧ (K( k_45 ) @ #j_47)
 ∧
  ∀ #r_48. (LtkReveal_27( S_44 ) @ #r_48) ⇒ ⊥"
*/
by sorry

lemma Client_auth:
  all-traces
  "∀ S_50 k_51 #i_52.
    (SessKeyC_31( S_50, k_51 ) @ #i_52) ⇒
    ((∃ #a_53. AnswerRequest_36( S_50, k_51 ) @ #a_53) ∨
     (∃ #r_54. (LtkReveal_27( S_50 ) @ #r_54) ∧ (#r_54 < #i_52)))"
/*
guarded formula characterizing all counter-examples:
"∃ S_50 k_51 #i_52.
  (SessKeyC_31( S_50, k_51 ) @ #i_52)
 ∧
  (∀ #a_53. (AnswerRequest_36( S_50, k_51 ) @ #a_53) ⇒ ⊥) ∧
  (∀ #r_54. (LtkReveal_27( S_50 ) @ #r_54) ⇒ ¬(#r_54 < #i_52))"
*/
by sorry

lemma Client_auth_injective:
  all-traces
  "∀ S_56 k_57 #i_58.
    (SessKeyC_31( S_56, k_57 ) @ #i_58) ⇒
    ((∃ #a_59.
       (AnswerRequest_36( S_56, k_57 ) @ #a_59) ∧
       (∀ #j_60. (SessKeyC_31( S_56, k_57 ) @ #j_60) ⇒ (#i_58 = #j_60))) ∨
     (∃ #r_61. (LtkReveal_27( S_56 ) @ #r_61) ∧ (#r_61 < #i_58)))"
/*
guarded formula characterizing all counter-examples:
"∃ S_56 k_57 #i_58.
  (SessKeyC_31( S_56, k_57 ) @ #i_58)
 ∧
  (∀ #a_59.
    (AnswerRequest_36( S_56, k_57 ) @ #a_59)
   ⇒
    ∃ #j_60. (SessKeyC_31( S_56, k_57 ) @ #j_60) ∧ ¬(#i_58 = #j_60)) ∧
  (∀ #r_61. (LtkReveal_27( S_56 ) @ #r_61) ⇒ ¬(#r_61 < #i_58))"
*/
by sorry

lemma Client_session_key_honest_setup:
  exists-trace
  "∃ S_63 k_64 #i_65.
    (SessKeyC_31( S_63, k_64 ) @ #i_65) ∧
    (¬(∃ #r_66. LtkReveal_27( S_63 ) @ #r_66))"
/*
guarded formula characterizing all satisfying traces:
"∃ S_63 k_64 #i_65.
  (SessKeyC_31( S_63, k_64 ) @ #i_65)
 ∧
  ∀ #r_66. (LtkReveal_27( S_63 ) @ #r_66) ⇒ ⊥"
*/
simplify
solve( StF( ~pid, 'tgk5', <k_64, S_63> ) ▶₀ #i_65 )
  case Client_34_manyto4to5
  solve( !KU( h(~k_33) ) @ #vk )
    case Serv_1_39
    solve( !KU( aenc(<'1', ~k_33>, pk(~ltkS_38)) ) @ #vk.1 )
      case Client_34_manyto4to5
      SOLVED // trace found
    qed
  qed
qed

/* All well-formedness checks were successful. */

end