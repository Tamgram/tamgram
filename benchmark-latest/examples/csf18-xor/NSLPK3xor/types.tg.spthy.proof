theory NSLPK3xor begin

// Function signature and definition of the equational theory E

builtins: xor
functions: adec/2, aenc/2, fst/1, pair/2, pk/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2





/* looping facts with injective instances: StF/3 */





rule (modulo E) Register_pk_26:
   [ Fr( ~ltkA_25 ) ]
  --[ Register_24( $A ) ]->
   [
   !Ltk_22( $A, ~ltkA_25 ), !Pk_23( $A, pk(~ltkA_25) ), Out( pk(~ltkA_25) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk_30:
   [ !Ltk_22( A_29, ltkA_28 ) ] --[ RevLtk_27( A_29 ) ]-> [ Out( ltkA_28 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_45_NoneTo2To3:
   [ Fr( ~pid ) ] --> [ StF( ~pid, 'tgk3', 'empty_tuple' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_45_ManyTo3To4_I_1:
   [ StF( ~pid, 'tgk3', 'empty_tuple' ), Fr( ~ni_37 ), !Pk_23( $R, pkR_36 )
   ]
  --[ OUT_I_1_34( aenc(<'1', ~ni_37, $I>, pkR_36) ) ]->
   [
   StF( ~pid, 'tgk4', <$I, $R, ~ni_37> ),
   Out( aenc(<'1', ~ni_37, $I>, pkR_36) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_45_ManyTo4ToNone_I_2:
   [
   StF( ~pid, 'tgk4', <tgc_I_0, tgc_R_0, tgc_ni_0> ),
   !Ltk_22( tgc_I_0, ltkI_41 ),
   In( aenc(<'2', tgc_ni_0, x_39>, pk(ltkI_41)) ), !Pk_23( tgc_R_0, pkR_40 )
   ]
  --[
  IN_I_2_nr_35( (tgc_R_0⊕x_39), aenc(<'2', tgc_ni_0, x_39>, pk(ltkI_41)) ),
  Commit_31( tgc_I_0, tgc_R_0, <'init', tgc_ni_0, (tgc_R_0⊕x_39)> ),
  Running_32( tgc_R_0, tgc_I_0, <'resp', tgc_ni_0, (tgc_R_0⊕x_39)> )
  ]->
   [
   Out( aenc(<'3', (tgc_R_0⊕x_39)>, pkR_40) ),
   Secret_33( tgc_I_0, tgc_R_0, (tgc_R_0⊕x_39) ),
   Secret_33( tgc_I_0, tgc_R_0, tgc_ni_0 )
   ]

  /*
  rule (modulo AC) I_45_ManyTo4ToNone_I_2:
     [
     StF( ~pid, 'tgk4', <tgc_I_0, tgc_R_0, tgc_ni_0> ),
     !Ltk_22( tgc_I_0, ltkI_41 ),
     In( aenc(<'2', tgc_ni_0, x_39>, pk(ltkI_41)) ), !Pk_23( tgc_R_0, pkR_40 )
     ]
    --[
    IN_I_2_nr_35( z, aenc(<'2', tgc_ni_0, x_39>, pk(ltkI_41)) ),
    Commit_31( tgc_I_0, tgc_R_0, <'init', tgc_ni_0, z> ),
    Running_32( tgc_R_0, tgc_I_0, <'resp', tgc_ni_0, z> )
    ]->
     [
     Out( aenc(<'3', z>, pkR_40) ), Secret_33( tgc_I_0, tgc_R_0, z ),
     Secret_33( tgc_I_0, tgc_R_0, tgc_ni_0 )
     ]
    variants (modulo AC)
    1. tgc_R_0
             = tgc_R_0.13
       x_39  = tgc_R_0.13
       z     = zero
    
    2. tgc_R_0
             = tgc_R_0.13
       x_39  = zero
       z     = tgc_R_0.13
    
    3. tgc_R_0
             = tgc_R_0.15
       x_39  = x_39.17
       z     = (tgc_R_0.15⊕x_39.17)
    
    4. tgc_R_0
             = tgc_R_0.19
       x_39  = (tgc_R_0.19⊕z.25)
       z     = z.25
    
    5. tgc_R_0
             = zero
       x_39  = x_39.13
       z     = x_39.13
    
    6. tgc_R_0
             = (x.16⊕x.17)
       x_39  = (x.16⊕x.19)
       z     = (x.17⊕x.19)
    
    7. tgc_R_0
             = (x_39.17⊕z.21)
       x_39  = x_39.17
       z     = z.21
  */

rule (modulo E) R_56_NoneTo5To6:
   [ Fr( ~pid ) ] --> [ StF( ~pid, 'tgk6', 'empty_tuple' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_56_ManyTo6To7_R_1:
   [
   StF( ~pid, 'tgk6', 'empty_tuple' ), !Ltk_22( $R, ltkR_51 ),
   In( aenc(<'1', ni_50, I_52>, pk(ltkR_51)) ), !Pk_23( I_52, pkI_48 ),
   Fr( ~nr_49 )
   ]
  --[
  IN_R_1_ni_46( ni_50, aenc(<'1', ni_50, I_52>, pk(ltkR_51)) ),
  OUT_R_1_47( aenc(<'2', ni_50, ($R⊕~nr_49)>, pkI_48) ),
  Running_32( I_52, $R, <'init', ni_50, ~nr_49> )
  ]->
   [
   StF( ~pid, 'tgk7', <I_52, $R, ni_50, ~nr_49> ),
   Out( aenc(<'2', ni_50, ($R⊕~nr_49)>, pkI_48) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_56_ManyTo7ToNone_R_2:
   [
   StF( ~pid, 'tgk7', <tgc_I_0, tgc_R_0, tgc_ni_0, tgc_nr_0> ),
   !Ltk_22( tgc_R_0, ltkR_55 ), In( aenc(<'3', tgc_nr_0>, pk(ltkR_55)) )
   ]
  --[ Commit_31( tgc_R_0, tgc_I_0, <'resp', tgc_ni_0, tgc_nr_0> ) ]->
   [
   Secret_33( tgc_R_0, tgc_I_0, tgc_nr_0 ),
   Secret_33( tgc_R_0, tgc_I_0, tgc_ni_0 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Secrecy_claim_61:
   [ Secret_33( A_60, B_59, m_58 ) ]
  --[ Secret_57( A_60, B_59, m_58 ) ]->
   [ ]

  /* has exactly the trivial AC variant */

lemma types [sources]:
  all-traces
  "(∀ ni_62 m1_63 #i_64.
     (IN_R_1_ni_46( ni_62, m1_63 ) @ #i_64) ⇒
     ((∃ #j_65. (!KU( ni_62 ) @ #j_65) ∧ (#j_65 < #i_64)) ∨
      (∃ #j_66. OUT_I_1_34( m1_63 ) @ #j_66))) ∧
   (∀ nr_67 m2_68 #i_69.
     (IN_I_2_nr_35( nr_67, m2_68 ) @ #i_69) ⇒
     ((∃ #j_70. (!KU( nr_67 ) @ #j_70) ∧ (#j_70 < #i_69)) ∨
      (∃ #j_71. OUT_R_1_47( m2_68 ) @ #j_71)))"
/*
guarded formula characterizing all counter-examples:
"((∃ ni_62 m1_63 #i_64.
    (IN_R_1_ni_46( ni_62, m1_63 ) @ #i_64)
   ∧
    (∀ #j_65. (!KU( ni_62 ) @ #j_65) ⇒ ¬(#j_65 < #i_64)) ∧
    (∀ #j_66. (OUT_I_1_34( m1_63 ) @ #j_66) ⇒ ⊥)) ∨
  (∃ nr_67 m2_68 #i_69.
    (IN_I_2_nr_35( nr_67, m2_68 ) @ #i_69)
   ∧
    (∀ #j_70. (!KU( nr_67 ) @ #j_70) ⇒ ¬(#j_70 < #i_69)) ∧
    (∀ #j_71. (OUT_R_1_47( m2_68 ) @ #j_71) ⇒ ⊥)))"
*/
induction
  case non_empty_trace
  simplify
  solve( (∃ ni_62 m1_63 #i_64.
           (IN_R_1_ni_46( ni_62, m1_63 ) @ #i_64)
          ∧
           (∀ #j_65. (!KU( ni_62 ) @ #j_65) ⇒ ¬(#j_65 < #i_64)) ∧
           (∀ #j_66. (OUT_I_1_34( m1_63 ) @ #j_66) ⇒ ⊥))  ∥
         (∃ nr_67 m2_68 #i_69.
           (IN_I_2_nr_35( nr_67, m2_68 ) @ #i_69)
          ∧
           (∀ #j_70. (!KU( nr_67 ) @ #j_70) ⇒ ¬(#j_70 < #i_69)) ∧
           (∀ #j_71. (OUT_R_1_47( m2_68 ) @ #j_71) ⇒ ⊥)) )
    case case_2
    solve( (last(#i_69))  ∥
           (∃ #j_70. (!KU( nr_67 ) @ #j_70) ∧ (¬(last(#j_70))) ∧ (#j_70 < #i_69))  ∥
           (∃ #j_71.
             (OUT_R_1_47( aenc(<'2', tgc_ni_0, x_39>, pk(ltkI_41)) ) @ #j_71)
            ∧
             ¬(last(#j_71))) )
      case case_1
      solve( StF( ~pid, 'tgk4', <tgc_I_0, tgc_R_0, tgc_ni_0> ) ▶₀ #i_69 )
        case I_45_ManyTo3To4_I_1
        solve( !Ltk_22( $I, ltkI_41 ) ▶₁ #i_69 )
          case Register_pk_26
          solve( !Pk_23( $R, pkR_40 ) ▶₃ #i_69 )
            case Register_pk_26
            solve( !KU( aenc(<'2', ~ni_37, x_39>, pk(~ltkA_25)) ) @ #vk )
              case c_aenc
              solve( !KU( ~ni_37 ) @ #vk.5 )
                case I_45_ManyTo3To4_I_1
                solve( !KU( ~ltkA_25.1 ) @ #vk.7 )
                  case Reveal_ltk_30
                  solve( !KU( pk(~ltkA_25) ) @ #vk.5 )
                    case Register_pk_26
                    solve( splitEqs(0) )
                      case split_case_1
                      SOLVED // trace found
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

restriction onekeypername:
  "¬(∃ A_73 #i_74 #j_75.
      ((Register_24( A_73 ) @ #i_74) ∧ (Register_24( A_73 ) @ #j_75)) ∧
      (¬(#i_74 = #j_75)))"
  // safety formula

lemma nonce_secrecy:
  all-traces
  "¬(∃ A_77 B_78 s_79 #i_80.
      (((Secret_57( A_77, B_78, s_79 ) @ #i_80) ∧
        (∃ #j_81. K( s_79 ) @ #j_81)) ∧
       (¬(∃ #r_82. RevLtk_27( A_77 ) @ #r_82))) ∧
      (¬(∃ #r_83. RevLtk_27( B_78 ) @ #r_83)))"
/*
guarded formula characterizing all counter-examples:
"∃ A_77 B_78 s_79 #i_80.
  (Secret_57( A_77, B_78, s_79 ) @ #i_80)
 ∧
  (∃ #j_81. (K( s_79 ) @ #j_81)) ∧
  (∀ #r_82. (RevLtk_27( A_77 ) @ #r_82) ⇒ ⊥) ∧
  (∀ #r_83. (RevLtk_27( B_78 ) @ #r_83) ⇒ ⊥)"
*/
by sorry

lemma injective_agree:
  all-traces
  "∀ actor_85 peer_86 params_87 #i_88.
    (Commit_31( actor_85, peer_86, params_87 ) @ #i_88) ⇒
    (((∃ #j_89.
        ((Running_32( actor_85, peer_86, params_87 ) @ #j_89) ∧
         (#j_89 < #i_88)) ∧
        (¬(∃ actor2_90 peer2_91 #i2_92.
            (Commit_31( actor2_90, peer2_91, params_87 ) @ #i2_92) ∧
            (¬(#i_88 = #i2_92))))) ∨
      (∃ #r_93. RevLtk_27( actor_85 ) @ #r_93)) ∨
     (∃ #r_94. RevLtk_27( peer_86 ) @ #r_94))"
/*
guarded formula characterizing all counter-examples:
"∃ actor_85 peer_86 params_87 #i_88.
  (Commit_31( actor_85, peer_86, params_87 ) @ #i_88)
 ∧
  (∀ #j_89.
    (Running_32( actor_85, peer_86, params_87 ) @ #j_89)
   ⇒
    ((¬(#j_89 < #i_88)) ∨
     (∃ actor2_90 peer2_91 #i2_92.
       (Commit_31( actor2_90, peer2_91, params_87 ) @ #i2_92)
      ∧
       ¬(#i_88 = #i2_92)))) ∧
  (∀ #r_93. (RevLtk_27( actor_85 ) @ #r_93) ⇒ ⊥) ∧
  (∀ #r_94. (RevLtk_27( peer_86 ) @ #r_94) ⇒ ⊥)"
*/
by sorry

lemma session_key_setup_possible:
  exists-trace
  "∃ A_96 B_97 s_98 #i_99.
    ((Secret_57( A_96, B_97, s_98 ) @ #i_99) ∧
     (¬(∃ #r_100. RevLtk_27( A_96 ) @ #r_100))) ∧
    (¬(∃ #r_101. RevLtk_27( B_97 ) @ #r_101))"
/*
guarded formula characterizing all satisfying traces:
"∃ A_96 B_97 s_98 #i_99.
  (Secret_57( A_96, B_97, s_98 ) @ #i_99)
 ∧
  (∀ #r_100. (RevLtk_27( A_96 ) @ #r_100) ⇒ ⊥) ∧
  (∀ #r_101. (RevLtk_27( B_97 ) @ #r_101) ⇒ ⊥)"
*/
by sorry













/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.8.0
Maude version 3.1
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2023-09-06 07:55:08.336840989 UTC
*/

end