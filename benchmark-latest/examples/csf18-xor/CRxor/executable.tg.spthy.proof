theory CRxor begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



/* looping facts with injective instances: StF/3 */

rule (modulo E) Setup_28:
   [ Fr( ~k_27 ) ]
  --[ OnlyOnce_18( ) ]->
   [ !InitLTK_19( ~k_27 ), !RespLTK_20( ~k_27 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) initiator_33_1to2:
   [ Fr( ~pid ) ] --> [ StF( ~pid, 'tgk2', 'empty_tuple' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) initiator_33_manyto2to3:
   [ StF( ~pid, 'tgk2', 'empty_tuple' ), Fr( ~na_29 ) ]
  --[ Challenge_25( ~na_29 ) ]->
   [ StF( ~pid, 'tgk3', ~na_29 ), Out( ~na_29 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) initiator_33_manyto3:
   [
   StF( ~pid, 'tgk3', tgc_na_0 ), !InitLTK_19( ~k_32 ), In( <m_31, nb_30> )
   ]
  --[ Alive_23( tgc_na_0, ~k_32 ), Eq_21( h((~k_32⊕nb_30⊕tgc_na_0)), m_31 )
  ]->
   [ ]

  /*
  rule (modulo AC) initiator_33_manyto3:
     [
     StF( ~pid, 'tgk3', tgc_na_0 ), !InitLTK_19( ~k_32 ), In( <m_31, nb_30> )
     ]
    --[ Alive_23( tgc_na_0, ~k_32 ), Eq_21( h(z), m_31 ) ]->
     [ ]
    variants (modulo AC)
     1. ~k_32 = ~k_32.9
        nb_30 = nb_30.12
        tgc_na_0
              = tgc_na_0.13
        z     = (~k_32.9⊕nb_30.12⊕tgc_na_0.13)
    
     2. ~k_32 = ~k_32.9
        nb_30 = nb_30.12
        tgc_na_0
              = zero
        z     = (~k_32.9⊕nb_30.12)
    
     3. ~k_32 = ~k_32.9
        nb_30 = zero
        tgc_na_0
              = tgc_na_0.13
        z     = (~k_32.9⊕tgc_na_0.13)
    
     4. ~k_32 = ~k_32.10
        nb_30 = ~k_32.10
        tgc_na_0
              = tgc_na_0.14
        z     = tgc_na_0.14
    
     5. ~k_32 = ~k_32.10
        nb_30 = nb_30.13
        tgc_na_0
              = ~k_32.10
        z     = nb_30.13
    
     6. ~k_32 = ~k_32.10
        nb_30 = nb_30.13
        tgc_na_0
              = nb_30.13
        z     = ~k_32.10
    
     7. ~k_32 = ~k_32.11
        nb_30 = nb_30.14
        tgc_na_0
              = (nb_30.14⊕x.19)
        z     = (~k_32.11⊕x.19)
    
     8. ~k_32 = ~k_32.11
        nb_30 = (tgc_na_0.15⊕x.19)
        tgc_na_0
              = tgc_na_0.15
        z     = (~k_32.11⊕x.19)
    
     9. ~k_32 = ~k_32.12
        nb_30 = nb_30.15
        tgc_na_0
              = (~k_32.12⊕nb_30.15)
        z     = zero
    
    10. ~k_32 = ~k_32.12
        nb_30 = zero
        tgc_na_0
              = (~k_32.12⊕z.18)
        z     = z.18
    
    11. ~k_32 = ~k_32.12
        nb_30 = (~k_32.12⊕tgc_na_0.16)
        tgc_na_0
              = tgc_na_0.16
        z     = zero
    
    12. ~k_32 = ~k_32.12
        nb_30 = (~k_32.12⊕z.18)
        tgc_na_0
              = zero
        z     = z.18
    
    13. ~k_32 = ~k_32.12
        nb_30 = (x.19⊕x.20)
        tgc_na_0
              = (x.19⊕x.21)
        z     = (~k_32.12⊕x.20⊕x.21)
    
    14. ~k_32 = ~k_32.13
        nb_30 = nb_30.16
        tgc_na_0
              = (~k_32.13⊕nb_30.16⊕z.19)
        z     = z.19
    
    15. ~k_32 = ~k_32.13
        nb_30 = (~k_32.13⊕tgc_na_0.17⊕z.19)
        tgc_na_0
              = tgc_na_0.17
        z     = z.19
    
    16. ~k_32 = ~k_32.13
        nb_30 = (~k_32.13⊕x.23)
        tgc_na_0
              = tgc_na_0.17
        z     = (tgc_na_0.17⊕x.23)
    
    17. ~k_32 = ~k_32.13
        nb_30 = (~k_32.13⊕x.23)
        tgc_na_0
              = (z.19⊕x.23)
        z     = z.19
    
    18. ~k_32 = ~k_32.13
        nb_30 = (z.19⊕x.23)
        tgc_na_0
              = (~k_32.13⊕x.23)
        z     = z.19
    
    19. ~k_32 = ~k_32.14
        nb_30 = nb_30.17
        tgc_na_0
              = (~k_32.14⊕x.25)
        z     = (nb_30.17⊕x.25)
    
    20. ~k_32 = ~k_32.14
        nb_30 = (~k_32.14⊕x.24⊕x.25)
        tgc_na_0
              = (x.24⊕x.26)
        z     = (x.25⊕x.26)
    
    21. ~k_32 = ~k_32.14
        nb_30 = (x.24⊕x.25)
        tgc_na_0
              = (~k_32.14⊕x.24⊕x.26)
        z     = (x.25⊕x.26)
  */

rule (modulo E) responder_37:
   [ In( na_35 ), Fr( ~nb_34 ), !RespLTK_20( ~k_36 ) ]
  --[
  Response_26( ~k_36 ), Neq_22( na_35, zero ), NeqForExec_24( na_35, zero )
  ]->
   [ Out( <h((~k_36⊕~nb_34⊕na_35)), ~nb_34> ) ]

  /*
  rule (modulo AC) responder_37:
     [ In( na_35 ), Fr( ~nb_34 ), !RespLTK_20( ~k_36 ) ]
    --[
    Response_26( ~k_36 ), Neq_22( na_35, zero ), NeqForExec_24( na_35, zero )
    ]->
     [ Out( <h(z), ~nb_34> ) ]
    variants (modulo AC)
    1. ~k_36 = ~k_36.5
       ~nb_34
             = ~nb_34.5
       na_35 = na_35.5
       z     = (~k_36.5⊕~nb_34.5⊕na_35.5)
    
    2. ~k_36 = ~k_36.5
       ~nb_34
             = ~nb_34.5
       na_35 = zero
       z     = (~k_36.5⊕~nb_34.5)
    
    3. ~k_36 = ~x.5
       ~nb_34
             = ~x.5
       na_35 = na_35.6
       z     = na_35.6
    
    4. ~k_36 = ~x.5
       ~nb_34
             = ~nb_34.6
       na_35 = ~x.5
       z     = ~nb_34.6
    
    5. ~k_36 = ~x.5
       ~nb_34
             = ~x.6
       na_35 = (~x.5⊕~x.6)
       z     = zero
    
    6. ~k_36 = ~x.5
       ~nb_34
             = ~x.6
       na_35 = (~x.5⊕~x.6⊕x.7)
       z     = x.7
    
    7. ~k_36 = ~x.5
       ~nb_34
             = ~nb_34.8
       na_35 = (~x.5⊕x.7)
       z     = (x.7⊕~nb_34.8)
    
    8. ~k_36 = ~k_36.6
       ~nb_34
             = ~x.5
       na_35 = ~x.5
       z     = ~k_36.6
    
    9. ~k_36 = ~k_36.7
       ~nb_34
             = ~x.5
       na_35 = (~x.5⊕x.6)
       z     = (x.6⊕~k_36.7)
  */

restriction equality:
  "∀ x_38 y_39 #i_40. (Eq_21( x_38, y_39 ) @ #i_40) ⇒ (x_38 = y_39)"
  // safety formula

restriction unique:
  "∀ #i_42 #j_43.
    ((OnlyOnce_18( ) @ #i_42) ∧ (OnlyOnce_18( ) @ #j_43)) ⇒ (#i_42 = #j_43)"
  // safety formula

restriction inequality:
  "¬(∃ x_45 #i_46. Neq_22( x_45, x_45 ) @ #i_46)"
  // safety formula

lemma alive:
  all-traces
  "∀ x_48 y_49 #i_50.
    (Alive_23( x_48, y_49 ) @ #i_50) ⇒
    (∃ #j_51. Response_26( y_49 ) @ #j_51)"
/*
guarded formula characterizing all counter-examples:
"∃ x_48 y_49 #i_50.
  (Alive_23( x_48, y_49 ) @ #i_50)
 ∧
  ∀ #j_51. (Response_26( y_49 ) @ #j_51) ⇒ ⊥"
*/
by sorry

lemma recentalive_tag:
  all-traces
  "∀ x_53 y_54 #i_55.
    (Alive_23( x_53, y_54 ) @ #i_55) ⇒
    (∃ #j_56 #k_57.
      (((Challenge_25( x_53 ) @ #k_57) ∧ (Response_26( y_54 ) @ #j_56)) ∧
       (#k_57 < #j_56)) ∧
      (#j_56 < #i_55))"
/*
guarded formula characterizing all counter-examples:
"∃ x_53 y_54 #i_55.
  (Alive_23( x_53, y_54 ) @ #i_55)
 ∧
  ∀ #j_56 #k_57.
   (Challenge_25( x_53 ) @ #k_57) ∧ (Response_26( y_54 ) @ #j_56)
  ⇒
   ((¬(#k_57 < #j_56)) ∨ (¬(#j_56 < #i_55)))"
*/
by sorry

lemma executable:
  exists-trace
  "∃ x_59 y_60 #i_61 #j_62.
    (((Alive_23( x_59, y_60 ) @ #i_61) ∧ (Response_26( y_60 ) @ #j_62)) ∧
     (¬(∃ #k_63. (Response_26( y_60 ) @ #k_63) ∧ (¬(#j_62 = #k_63))))) ∧
    (¬(∃ #l_64. NeqForExec_24( x_59, x_59 ) @ #l_64))"
/*
guarded formula characterizing all satisfying traces:
"∃ x_59 y_60 #i_61 #j_62.
  (Alive_23( x_59, y_60 ) @ #i_61) ∧ (Response_26( y_60 ) @ #j_62)
 ∧
  (∀ #k_63. (Response_26( y_60 ) @ #k_63) ⇒ #j_62 = #k_63) ∧
  (∀ #l_64. (NeqForExec_24( x_59, x_59 ) @ #l_64) ⇒ ⊥)"
*/
simplify
solve( StF( ~pid, 'tgk3', x_59 ) ▶₀ #i_61 )
  case initiator_33_manyto2to3
  solve( !InitLTK_19( ~k_32 ) ▶₁ #i_61 )
    case Setup_28
    solve( !RespLTK_20( ~k_32 ) ▶₂ #j_62 )
      case Setup_28
      solve( splitEqs(0) )
        case split_case_3
        solve( !KU( h((~k_32⊕~na_29⊕nb_30)) ) @ #vk.1 )
          case responder_37
          solve( splitEqs(1) )
            case split_case_1
            solve( !KU( ~nb_34 ) @ #vk.2 )
              case responder_37
              solve( !KU( ~na_29 ) @ #vk.3 )
                case initiator_33_manyto2to3
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end