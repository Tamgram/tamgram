theory CRxor begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



/* looping facts with injective instances: StF/3 */

rule (modulo E) Setup_28:
   [ Fr( ~k_27 ) ]
  --[ OnlyOnce_18( ) ]->
   [ !InitLTK_19( ~k_27 ), !RespLTK_20( ~k_27 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) initiator_34_1to2:
   [ Fr( ~pid ) ] --> [ StF( ~pid, 'tgk2', 'empty_tuple' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) initiator_34_manyto2to3_initiator:
   [ StF( ~pid, 'tgk2', 'empty_tuple' ), Fr( ~na_29 ) ]
  --[ Challenge_25( ~na_29 ) ]->
   [ StF( ~pid, 'tgk3', ~na_29 ), Out( ~na_29 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) initiator_34_manyto3_initiator2:
   [
   StF( ~pid, 'tgk3', ~u_tgany0_33 ), !InitLTK_19( ~k_32 ),
   In( <m_31, nb_30> )
   ]
  --[
  Alive_23( ~u_tgany0_33, ~k_32 ),
  Eq_21( h((~k_32⊕~u_tgany0_33⊕nb_30)), m_31 )
  ]->
   [ ]

  /*
  rule (modulo AC) initiator_34_manyto3_initiator2:
     [
     StF( ~pid, 'tgk3', ~u_tgany0_33 ), !InitLTK_19( ~k_32 ),
     In( <m_31, nb_30> )
     ]
    --[ Alive_23( ~u_tgany0_33, ~k_32 ), Eq_21( h(z), m_31 ) ]->
     [ ]
    variants (modulo AC)
    1. ~k_32 = ~k_32.9
       ~u_tgany0_33
             = ~u_tgany0_33.11
       nb_30 = nb_30.13
       z     = (~k_32.9⊕~u_tgany0_33.11⊕nb_30.13)
    
    2. ~k_32 = ~k_32.9
       ~u_tgany0_33
             = ~u_tgany0_33.11
       nb_30 = zero
       z     = (~k_32.9⊕~u_tgany0_33.11)
    
    3. ~k_32 = ~k_32.10
       ~u_tgany0_33
             = ~k_32.10
       nb_30 = nb_30.14
       z     = nb_30.14
    
    4. ~k_32 = ~k_32.10
       ~u_tgany0_33
             = ~u_tgany0_33.12
       nb_30 = ~k_32.10
       z     = ~u_tgany0_33.12
    
    5. ~k_32 = ~k_32.10
       ~u_tgany0_33
             = ~u_tgany0_33.12
       nb_30 = ~u_tgany0_33.12
       z     = ~k_32.10
    
    6. ~k_32 = ~k_32.11
       ~u_tgany0_33
             = ~u_tgany0_33.13
       nb_30 = (~k_32.11⊕~u_tgany0_33.13)
       z     = zero
    
    7. ~k_32 = ~k_32.12
       ~u_tgany0_33
             = ~u_tgany0_33.14
       nb_30 = (~u_tgany0_33.14⊕x.21)
       z     = (~k_32.12⊕x.21)
    
    8. ~k_32 = ~k_32.13
       ~u_tgany0_33
             = ~u_tgany0_33.15
       nb_30 = (~k_32.13⊕~u_tgany0_33.15⊕z.19)
       z     = z.19
    
    9. ~k_32 = ~k_32.14
       ~u_tgany0_33
             = ~u_tgany0_33.16
       nb_30 = (~k_32.14⊕x.25)
       z     = (~u_tgany0_33.16⊕x.25)
  */

rule (modulo E) responder_38:
   [ In( na_36 ), Fr( ~nb_35 ), !RespLTK_20( ~k_37 ) ]
  --[
  Response_26( ~k_37 ), Neq_22( na_36, zero ), NeqForExec_24( na_36, zero )
  ]->
   [ Out( <h((~k_37⊕~nb_35⊕na_36)), ~nb_35> ) ]

  /*
  rule (modulo AC) responder_38:
     [ In( na_36 ), Fr( ~nb_35 ), !RespLTK_20( ~k_37 ) ]
    --[
    Response_26( ~k_37 ), Neq_22( na_36, zero ), NeqForExec_24( na_36, zero )
    ]->
     [ Out( <h(z), ~nb_35> ) ]
    variants (modulo AC)
    1. ~k_37 = ~k_37.5
       ~nb_35
             = ~nb_35.5
       na_36 = na_36.5
       z     = (~k_37.5⊕~nb_35.5⊕na_36.5)
    
    2. ~k_37 = ~k_37.5
       ~nb_35
             = ~nb_35.5
       na_36 = zero
       z     = (~k_37.5⊕~nb_35.5)
    
    3. ~k_37 = ~x.5
       ~nb_35
             = ~x.5
       na_36 = na_36.6
       z     = na_36.6
    
    4. ~k_37 = ~x.5
       ~nb_35
             = ~nb_35.6
       na_36 = ~x.5
       z     = ~nb_35.6
    
    5. ~k_37 = ~x.5
       ~nb_35
             = ~x.6
       na_36 = (~x.5⊕~x.6)
       z     = zero
    
    6. ~k_37 = ~x.5
       ~nb_35
             = ~x.6
       na_36 = (~x.5⊕~x.6⊕x.7)
       z     = x.7
    
    7. ~k_37 = ~x.5
       ~nb_35
             = ~nb_35.8
       na_36 = (~x.5⊕x.7)
       z     = (x.7⊕~nb_35.8)
    
    8. ~k_37 = ~k_37.6
       ~nb_35
             = ~x.5
       na_36 = ~x.5
       z     = ~k_37.6
    
    9. ~k_37 = ~k_37.7
       ~nb_35
             = ~x.5
       na_36 = (~x.5⊕x.6)
       z     = (x.6⊕~k_37.7)
  */

restriction equality:
  "∀ x_39 y_40 #i_41. (Eq_21( x_39, y_40 ) @ #i_41) ⇒ (x_39 = y_40)"
  // safety formula

restriction unique:
  "∀ #i_43 #j_44.
    ((OnlyOnce_18( ) @ #i_43) ∧ (OnlyOnce_18( ) @ #j_44)) ⇒ (#i_43 = #j_44)"
  // safety formula

restriction inequality:
  "¬(∃ x_46 #i_47. Neq_22( x_46, x_46 ) @ #i_47)"
  // safety formula

lemma alive:
  all-traces
  "∀ x_49 y_50 #i_51.
    (Alive_23( x_49, y_50 ) @ #i_51) ⇒
    (∃ #j_52. Response_26( y_50 ) @ #j_52)"
/*
guarded formula characterizing all counter-examples:
"∃ x_49 y_50 #i_51.
  (Alive_23( x_49, y_50 ) @ #i_51)
 ∧
  ∀ #j_52. (Response_26( y_50 ) @ #j_52) ⇒ ⊥"
*/
simplify
solve( StF( ~pid, 'tgk3', ~u_tgany0_33 ) ▶₀ #i_51 )
  case initiator_34_manyto2to3_initiator
  solve( !InitLTK_19( ~k_32 ) ▶₁ #i_51 )
    case Setup_28
    solve( splitEqs(0) )
      case split_case_1
      by solve( !KU( ~k_32 ) @ #vk.2 )
    next
      case split_case_2
      solve( !KU( h(~k_32) ) @ #vk.1 )
        case c_h
        by solve( !KU( ~k_32 ) @ #vk.3 )
      next
        case responder_38
        by contradiction /* from formulas */
      qed
    next
      case split_case_3
      solve( !KU( h((~k_32⊕~u_tgany0_33⊕nb_30)) ) @ #vk.1 )
        case c_h
        solve( !KU( (~k_32⊕~u_tgany0_33⊕nb_30) ) @ #vk.3 )
          case c_xor_case_1
          solve( !KU( (~k_32⊕nb_30) ) @ #vk.4 )
            case c_xor
            by solve( !KU( ~k_32 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k_32⊕nb_30) ) ▶₀ #vk.2 )
              case initiator_34_manyto2to3_initiator
              by contradiction /* impossible chain */
            next
              case responder_38
              solve( (#vl, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by solve( (#vr.4, 0) ~~> (#vk.2, 0) )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case c_xor_case_2
          by solve( !KU( ~k_32 ) @ #vk.5 )
        next
          case c_xor_case_3
          solve( !KU( (~k_32⊕~u_tgany0_33) ) @ #vk.4 )
            case c_xor
            by solve( !KU( ~k_32 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k_32⊕~u_tgany0_33) ) ▶₀ #vk.2 )
              case initiator_34_manyto2to3_initiator
              by contradiction /* impossible chain */
            next
              case responder_38
              solve( (#vl, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by solve( (#vr.4, 0) ~~> (#vk.2, 0) )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k_32⊕~u_tgany0_33⊕nb_30) ) ▶₀ #vk.1 )
            case initiator_34_manyto2to3_initiator
            by contradiction /* impossible chain */
          next
            case responder_38
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case responder_38
        by contradiction /* from formulas */
      qed
    next
      case split_case_4
      solve( !KU( h((~k_32⊕~u_tgany0_33)) ) @ #vk.1 )
        case c_h
        solve( !KU( (~k_32⊕~u_tgany0_33) ) @ #vk.3 )
          case c_xor
          by solve( !KU( ~k_32 ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k_32⊕~u_tgany0_33) ) ▶₀ #vk.1 )
            case initiator_34_manyto2to3_initiator
            by contradiction /* impossible chain */
          next
            case responder_38
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case responder_38
        by contradiction /* from formulas */
      qed
    next
      case split_case_5
      solve( !KU( (~k_32⊕~u_tgany0_33) ) @ #vk.2 )
        case c_xor
        by solve( !KU( ~k_32 ) @ #vk.4 )
      next
        case coerce
        solve( !KD( (~k_32⊕~u_tgany0_33) ) ▶₀ #vk )
          case initiator_34_manyto2to3_initiator
          by contradiction /* impossible chain */
        next
          case responder_38
          solve( (#vl, 0) ~~> (#vk, 0) )
            case d_0_fst
            by solve( (#vr.4, 0) ~~> (#vk, 0) )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        qed
      qed
    next
      case split_case_6
      solve( !KU( (~k_32⊕~u_tgany0_33⊕z) ) @ #vk.2 )
        case c_xor_case_1
        solve( !KU( (~k_32⊕z) ) @ #vk.3 )
          case c_xor
          by solve( !KU( ~k_32 ) @ #vk.6 )
        next
          case coerce
          solve( !KD( (~k_32⊕z) ) ▶₀ #vk.1 )
            case initiator_34_manyto2to3_initiator
            by contradiction /* impossible chain */
          next
            case responder_38
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case c_xor_case_2
        by solve( !KU( ~k_32 ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k_32⊕~u_tgany0_33) ) @ #vk.4 )
          case c_xor
          by solve( !KU( ~k_32 ) @ #vk.6 )
        next
          case coerce
          solve( !KD( (~k_32⊕~u_tgany0_33) ) ▶₀ #vk.1 )
            case initiator_34_manyto2to3_initiator
            by contradiction /* impossible chain */
          next
            case responder_38
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k_32⊕~u_tgany0_33⊕z) ) ▶₀ #vk )
          case initiator_34_manyto2to3_initiator
          by contradiction /* impossible chain */
        next
          case responder_38
          solve( (#vl, 0) ~~> (#vk, 0) )
            case d_0_fst
            by solve( (#vr.4, 0) ~~> (#vk, 0) )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        qed
      qed
    next
      case split_case_7
      solve( !KU( h((~k_32⊕x)) ) @ #vk.1 )
        case c_h
        solve( !KU( (~u_tgany0_33⊕x) ) @ #vk.2 )
          case c_xor
          solve( !KU( (~k_32⊕x) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k_32 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k_32⊕x) ) ▶₀ #vk.2 )
              case initiator_34_manyto2to3_initiator
              by contradiction /* impossible chain */
            next
              case responder_38
              solve( (#vl, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by solve( (#vr.4, 0) ~~> (#vk.2, 0) )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~u_tgany0_33⊕x) ) ▶₀ #vk.1 )
            case initiator_34_manyto2to3_initiator
            by contradiction /* impossible chain */
          next
            case responder_38
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case responder_38
        by contradiction /* from formulas */
      qed
    next
      case split_case_8
      solve( !KU( h((~u_tgany0_33⊕x)) ) @ #vk.1 )
        case c_h
        solve( !KU( (~k_32⊕x) ) @ #vk.2 )
          case c_xor
          by solve( !KU( ~k_32 ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k_32⊕x) ) ▶₀ #vk.1 )
            case initiator_34_manyto2to3_initiator
            by contradiction /* impossible chain */
          next
            case responder_38
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case responder_38
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma recentalive_tag:
  all-traces
  "∀ x_54 y_55 #i_56.
    (Alive_23( x_54, y_55 ) @ #i_56) ⇒
    (∃ #j_57 #k_58.
      (((Challenge_25( x_54 ) @ #k_58) ∧ (Response_26( y_55 ) @ #j_57)) ∧
       (#k_58 < #j_57)) ∧
      (#j_57 < #i_56))"
/*
guarded formula characterizing all counter-examples:
"∃ x_54 y_55 #i_56.
  (Alive_23( x_54, y_55 ) @ #i_56)
 ∧
  ∀ #j_57 #k_58.
   (Challenge_25( x_54 ) @ #k_58) ∧ (Response_26( y_55 ) @ #j_57)
  ⇒
   ((¬(#k_58 < #j_57)) ∨ (¬(#j_57 < #i_56)))"
*/
by sorry

lemma executable:
  exists-trace
  "∃ x_60 y_61 #i_62 #j_63.
    (((Alive_23( x_60, y_61 ) @ #i_62) ∧ (Response_26( y_61 ) @ #j_63)) ∧
     (¬(∃ #k_64. (Response_26( y_61 ) @ #k_64) ∧ (¬(#j_63 = #k_64))))) ∧
    (¬(∃ #l_65. NeqForExec_24( x_60, x_60 ) @ #l_65))"
/*
guarded formula characterizing all satisfying traces:
"∃ x_60 y_61 #i_62 #j_63.
  (Alive_23( x_60, y_61 ) @ #i_62) ∧ (Response_26( y_61 ) @ #j_63)
 ∧
  (∀ #k_64. (Response_26( y_61 ) @ #k_64) ⇒ #j_63 = #k_64) ∧
  (∀ #l_65. (NeqForExec_24( x_60, x_60 ) @ #l_65) ⇒ ⊥)"
*/
by sorry

/* All well-formedness checks were successful. */

end