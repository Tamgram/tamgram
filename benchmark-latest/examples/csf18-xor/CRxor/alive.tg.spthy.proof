theory CRxor begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



/* looping facts with injective instances: StF/3 */

rule (modulo E) Setup_30:
   [ Fr( ~k_29 ) ]
  --[ OnlyOnce_20( ) ]->
   [ !InitLTK_21( ~k_29 ), !RespLTK_22( ~k_29 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) initiator_36_1to2:
   [ Fr( ~pid ) ] --> [ StF( ~pid, 'tgk2', 'empty_tuple' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) initiator_36_manyto2to3_initiator:
   [ StF( ~pid, 'tgk2', 'empty_tuple' ), Fr( ~na_31 ) ]
  --[ Challenge_27( ~na_31 ) ]->
   [ StF( ~pid, 'tgk3', ~na_31 ), Out( ~na_31 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) initiator_36_manyto3_initiator2:
   [
   StF( ~pid, 'tgk3', ~u_tgany0_35 ), !InitLTK_21( ~k_34 ),
   In( <m_33, nb_32> )
   ]
  --[
  Alive_25( ~u_tgany0_35, ~k_34 ),
  Eq_23( h((~k_34⊕~u_tgany0_35⊕nb_32)), m_33 )
  ]->
   [ ]

  /*
  rule (modulo AC) initiator_36_manyto3_initiator2:
     [
     StF( ~pid, 'tgk3', ~u_tgany0_35 ), !InitLTK_21( ~k_34 ),
     In( <m_33, nb_32> )
     ]
    --[ Alive_25( ~u_tgany0_35, ~k_34 ), Eq_23( h(z), m_33 ) ]->
     [ ]
    variants (modulo AC)
    1. ~k_34 = ~k_34.9
       ~u_tgany0_35
             = ~u_tgany0_35.11
       nb_32 = nb_32.13
       z     = (~k_34.9⊕~u_tgany0_35.11⊕nb_32.13)
    
    2. ~k_34 = ~k_34.9
       ~u_tgany0_35
             = ~u_tgany0_35.11
       nb_32 = zero
       z     = (~k_34.9⊕~u_tgany0_35.11)
    
    3. ~k_34 = ~k_34.10
       ~u_tgany0_35
             = ~k_34.10
       nb_32 = nb_32.14
       z     = nb_32.14
    
    4. ~k_34 = ~k_34.10
       ~u_tgany0_35
             = ~u_tgany0_35.12
       nb_32 = ~k_34.10
       z     = ~u_tgany0_35.12
    
    5. ~k_34 = ~k_34.10
       ~u_tgany0_35
             = ~u_tgany0_35.12
       nb_32 = ~u_tgany0_35.12
       z     = ~k_34.10
    
    6. ~k_34 = ~k_34.11
       ~u_tgany0_35
             = ~u_tgany0_35.13
       nb_32 = (~k_34.11⊕~u_tgany0_35.13)
       z     = zero
    
    7. ~k_34 = ~k_34.12
       ~u_tgany0_35
             = ~u_tgany0_35.14
       nb_32 = (~u_tgany0_35.14⊕x.21)
       z     = (~k_34.12⊕x.21)
    
    8. ~k_34 = ~k_34.13
       ~u_tgany0_35
             = ~u_tgany0_35.15
       nb_32 = (~k_34.13⊕~u_tgany0_35.15⊕z.19)
       z     = z.19
    
    9. ~k_34 = ~k_34.14
       ~u_tgany0_35
             = ~u_tgany0_35.16
       nb_32 = (~k_34.14⊕x.25)
       z     = (~u_tgany0_35.16⊕x.25)
  */

rule (modulo E) responder_40:
   [ In( na_38 ), Fr( ~nb_37 ), !RespLTK_22( ~k_39 ) ]
  --[
  Response_28( ~k_39 ), Neq_24( na_38, zero ), NeqForExec_26( na_38, zero )
  ]->
   [ Out( <h((~k_39⊕~nb_37⊕na_38)), ~nb_37> ) ]

  /*
  rule (modulo AC) responder_40:
     [ In( na_38 ), Fr( ~nb_37 ), !RespLTK_22( ~k_39 ) ]
    --[
    Response_28( ~k_39 ), Neq_24( na_38, zero ), NeqForExec_26( na_38, zero )
    ]->
     [ Out( <h(z), ~nb_37> ) ]
    variants (modulo AC)
    1. ~k_39 = ~k_39.5
       ~nb_37
             = ~nb_37.5
       na_38 = na_38.5
       z     = (~k_39.5⊕~nb_37.5⊕na_38.5)
    
    2. ~k_39 = ~k_39.5
       ~nb_37
             = ~nb_37.5
       na_38 = zero
       z     = (~k_39.5⊕~nb_37.5)
    
    3. ~k_39 = ~x.5
       ~nb_37
             = ~x.5
       na_38 = na_38.6
       z     = na_38.6
    
    4. ~k_39 = ~x.5
       ~nb_37
             = ~nb_37.6
       na_38 = ~x.5
       z     = ~nb_37.6
    
    5. ~k_39 = ~x.5
       ~nb_37
             = ~x.6
       na_38 = (~x.5⊕~x.6)
       z     = zero
    
    6. ~k_39 = ~x.5
       ~nb_37
             = ~x.6
       na_38 = (~x.5⊕~x.6⊕x.7)
       z     = x.7
    
    7. ~k_39 = ~x.5
       ~nb_37
             = ~nb_37.8
       na_38 = (~x.5⊕x.7)
       z     = (x.7⊕~nb_37.8)
    
    8. ~k_39 = ~k_39.6
       ~nb_37
             = ~x.5
       na_38 = ~x.5
       z     = ~k_39.6
    
    9. ~k_39 = ~k_39.7
       ~nb_37
             = ~x.5
       na_38 = (~x.5⊕x.6)
       z     = (x.6⊕~k_39.7)
  */

restriction equality:
  "∀ x_41 y_42 #i_43. (Eq_23( x_41, y_42 ) @ #i_43) ⇒ (x_41 = y_42)"
  // safety formula

restriction unique:
  "∀ #i_45 #j_46.
    ((OnlyOnce_20( ) @ #i_45) ∧ (OnlyOnce_20( ) @ #j_46)) ⇒ (#i_45 = #j_46)"
  // safety formula

restriction inequality:
  "¬(∃ x_48 #i_49. Neq_24( x_48, x_48 ) @ #i_49)"
  // safety formula

lemma alive:
  all-traces
  "∀ x_51 y_52 #i_53.
    (Alive_25( x_51, y_52 ) @ #i_53) ⇒
    (∃ #j_54. Response_28( y_52 ) @ #j_54)"
/*
guarded formula characterizing all counter-examples:
"∃ x_51 y_52 #i_53.
  (Alive_25( x_51, y_52 ) @ #i_53)
 ∧
  ∀ #j_54. (Response_28( y_52 ) @ #j_54) ⇒ ⊥"
*/
simplify
solve( StF( ~pid, 'tgk3', ~u_tgany0_35 ) ▶₀ #i_53 )
  case initiator_36_manyto2to3_initiator
  solve( !InitLTK_21( ~k_34 ) ▶₁ #i_53 )
    case Setup_30
    solve( splitEqs(0) )
      case split_case_1
      by solve( !KU( ~k_34 ) @ #vk.2 )
    next
      case split_case_2
      solve( !KU( h(~k_34) ) @ #vk.1 )
        case c_h
        by solve( !KU( ~k_34 ) @ #vk.3 )
      next
        case responder_40
        by contradiction /* from formulas */
      qed
    next
      case split_case_3
      solve( !KU( h((~k_34⊕~u_tgany0_35⊕nb_32)) ) @ #vk.1 )
        case c_h
        solve( !KU( (~k_34⊕~u_tgany0_35⊕nb_32) ) @ #vk.3 )
          case c_xor_case_1
          solve( !KU( (~k_34⊕nb_32) ) @ #vk.4 )
            case c_xor
            by solve( !KU( ~k_34 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k_34⊕nb_32) ) ▶₀ #vk.2 )
              case initiator_36_manyto2to3_initiator
              by contradiction /* impossible chain */
            next
              case responder_40
              solve( (#vl, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by solve( (#vr.4, 0) ~~> (#vk.2, 0) )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case c_xor_case_2
          by solve( !KU( ~k_34 ) @ #vk.5 )
        next
          case c_xor_case_3
          solve( !KU( (~k_34⊕~u_tgany0_35) ) @ #vk.4 )
            case c_xor
            by solve( !KU( ~k_34 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k_34⊕~u_tgany0_35) ) ▶₀ #vk.2 )
              case initiator_36_manyto2to3_initiator
              by contradiction /* impossible chain */
            next
              case responder_40
              solve( (#vl, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by solve( (#vr.4, 0) ~~> (#vk.2, 0) )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k_34⊕~u_tgany0_35⊕nb_32) ) ▶₀ #vk.1 )
            case initiator_36_manyto2to3_initiator
            by contradiction /* impossible chain */
          next
            case responder_40
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case responder_40
        by contradiction /* from formulas */
      qed
    next
      case split_case_4
      solve( !KU( h((~k_34⊕~u_tgany0_35)) ) @ #vk.1 )
        case c_h
        solve( !KU( (~k_34⊕~u_tgany0_35) ) @ #vk.3 )
          case c_xor
          by solve( !KU( ~k_34 ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k_34⊕~u_tgany0_35) ) ▶₀ #vk.1 )
            case initiator_36_manyto2to3_initiator
            by contradiction /* impossible chain */
          next
            case responder_40
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case responder_40
        by contradiction /* from formulas */
      qed
    next
      case split_case_5
      solve( !KU( (~k_34⊕~u_tgany0_35) ) @ #vk.2 )
        case c_xor
        by solve( !KU( ~k_34 ) @ #vk.4 )
      next
        case coerce
        solve( !KD( (~k_34⊕~u_tgany0_35) ) ▶₀ #vk )
          case initiator_36_manyto2to3_initiator
          by contradiction /* impossible chain */
        next
          case responder_40
          solve( (#vl, 0) ~~> (#vk, 0) )
            case d_0_fst
            by solve( (#vr.4, 0) ~~> (#vk, 0) )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        qed
      qed
    next
      case split_case_6
      solve( !KU( (~k_34⊕~u_tgany0_35⊕z) ) @ #vk.2 )
        case c_xor_case_1
        solve( !KU( (~k_34⊕z) ) @ #vk.3 )
          case c_xor
          by solve( !KU( ~k_34 ) @ #vk.6 )
        next
          case coerce
          solve( !KD( (~k_34⊕z) ) ▶₀ #vk.1 )
            case initiator_36_manyto2to3_initiator
            by contradiction /* impossible chain */
          next
            case responder_40
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case c_xor_case_2
        by solve( !KU( ~k_34 ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k_34⊕~u_tgany0_35) ) @ #vk.4 )
          case c_xor
          by solve( !KU( ~k_34 ) @ #vk.6 )
        next
          case coerce
          solve( !KD( (~k_34⊕~u_tgany0_35) ) ▶₀ #vk.1 )
            case initiator_36_manyto2to3_initiator
            by contradiction /* impossible chain */
          next
            case responder_40
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k_34⊕~u_tgany0_35⊕z) ) ▶₀ #vk )
          case initiator_36_manyto2to3_initiator
          by contradiction /* impossible chain */
        next
          case responder_40
          solve( (#vl, 0) ~~> (#vk, 0) )
            case d_0_fst
            by solve( (#vr.4, 0) ~~> (#vk, 0) )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        qed
      qed
    next
      case split_case_7
      solve( !KU( h((~k_34⊕x)) ) @ #vk.1 )
        case c_h
        solve( !KU( (~u_tgany0_35⊕x) ) @ #vk.2 )
          case c_xor
          solve( !KU( (~k_34⊕x) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k_34 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k_34⊕x) ) ▶₀ #vk.2 )
              case initiator_36_manyto2to3_initiator
              by contradiction /* impossible chain */
            next
              case responder_40
              solve( (#vl, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by solve( (#vr.4, 0) ~~> (#vk.2, 0) )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~u_tgany0_35⊕x) ) ▶₀ #vk.1 )
            case initiator_36_manyto2to3_initiator
            by contradiction /* impossible chain */
          next
            case responder_40
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case responder_40
        by contradiction /* from formulas */
      qed
    next
      case split_case_8
      solve( !KU( h((~u_tgany0_35⊕x)) ) @ #vk.1 )
        case c_h
        solve( !KU( (~k_34⊕x) ) @ #vk.2 )
          case c_xor
          by solve( !KU( ~k_34 ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k_34⊕x) ) ▶₀ #vk.1 )
            case initiator_36_manyto2to3_initiator
            by contradiction /* impossible chain */
          next
            case responder_40
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case responder_40
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma recentalive_tag:
  all-traces
  "∀ x_56 y_57 #i_58.
    (Alive_25( x_56, y_57 ) @ #i_58) ⇒
    (∃ #j_59 #k_60.
      (((Challenge_27( x_56 ) @ #k_60) ∧ (Response_28( y_57 ) @ #j_59)) ∧
       (#k_60 < #j_59)) ∧
      (#j_59 < #i_58))"
/*
guarded formula characterizing all counter-examples:
"∃ x_56 y_57 #i_58.
  (Alive_25( x_56, y_57 ) @ #i_58)
 ∧
  ∀ #j_59 #k_60.
   (Challenge_27( x_56 ) @ #k_60) ∧ (Response_28( y_57 ) @ #j_59)
  ⇒
   ((¬(#k_60 < #j_59)) ∨ (¬(#j_59 < #i_58)))"
*/
by sorry

lemma executable:
  exists-trace
  "∃ x_62 y_63 #i_64 #j_65.
    (((Alive_25( x_62, y_63 ) @ #i_64) ∧ (Response_28( y_63 ) @ #j_65)) ∧
     (¬(∃ #k_66. (Response_28( y_63 ) @ #k_66) ∧ (¬(#j_65 = #k_66))))) ∧
    (¬(∃ #l_67. NeqForExec_26( x_62, x_62 ) @ #l_67))"
/*
guarded formula characterizing all satisfying traces:
"∃ x_62 y_63 #i_64 #j_65.
  (Alive_25( x_62, y_63 ) @ #i_64) ∧ (Response_28( y_63 ) @ #j_65)
 ∧
  (∀ #k_66. (Response_28( y_63 ) @ #k_66) ⇒ #j_65 = #k_66) ∧
  (∀ #l_67. (NeqForExec_26( x_62, x_62 ) @ #l_67) ⇒ ⊥)"
*/
by sorry

/* All well-formedness checks were successful. */

end