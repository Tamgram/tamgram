theory KCL07 begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



rule (modulo E) Setup:
   [ Fr( ~k ), Fr( ~id ) ]
  --[ OnlyOnce( ) ]->
   [ !Reader( ~k, ~id ), !Tag( ~k, ~id ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reader1:
   [ Fr( ~r1 ) ]
  --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 ), Initiated( ~r1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) tag1:
   [ In( r1 ), Fr( ~r2 ), !Tag( ~k, ~id ) ]
  --[ Response( ~k, 'Tag' ) ]->
   [ Out( <(~id⊕~r2), (~r2⊕h(<r1, ~k>))> ) ]

  /*
  rule (modulo AC) tag1:
     [ In( r1 ), Fr( ~r2 ), !Tag( ~k, ~id ) ]
    --[ Response( ~k, 'Tag' ) ]->
     [ Out( <z, (~r2⊕h(<r1, ~k>))> ) ]
    variants (modulo AC)
    1. ~id   = ~id.17
       ~r2   = ~id.17
       z     = zero
    
    2. ~id   = ~id.17
       ~r2   = ~r2.19
       z     = (~id.17⊕~r2.19)
  */

rule (modulo E) reader2:
   [ Initiated( ~r1 ), !Reader( ~k, ~id ), In( xoredhash ) ]
  --[ Alive( ~k, 'Tag' ), Eq( xoredhash, (~id⊕h(<~r1, ~k>)) ) ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction unique:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma recentalive_tag:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma executable:
  exists-trace
  "∃ x #i #j.
    ((Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)) ∧
    (¬(∃ #k. (Response( x, 'Tag' ) @ #k) ∧ (¬(#j = #k))))"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j.
  (Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)
 ∧
  ∀ #k. (Response( x, 'Tag' ) @ #k) ⇒ #j = #k"
*/
simplify
solve( Initiated( ~r1 ) ▶₀ #i )
  case reader1
  solve( !Reader( ~k, ~id ) ▶₁ #i )
    case Setup
    solve( !Tag( ~k, ~id.1 ) ▶₂ #j )
      case Setup
      solve( splitEqs(1) )
        case split
        solve( !KU( (~id⊕h(<~r1, ~k>)) ) @ #vk )
          case coerce
          solve( !KD( (~id⊕h(<~r1, ~k>)) ) ▶₀ #vk )
            case tag1
            solve( (#vl, 0) ~~> (#vk, 0) )
              case d_0_fst
              solve( !Tag( ~k.1, ~id.1 ) ▶₂ #vr.2 )
                case Setup
                solve( (#vr.2, 0) ~~> (#vk, 0) )
                  case d_xor_case_1
                  solve( (#vr.3, 0) ~~> (#vk, 0) )
                    case Xor
                    solve( !KU( (~r2⊕h(<~r1, ~k>)) ) @ #vk.2 )
                      case coerce
                      solve( !KD( (~r2⊕h(<~r1, ~k>)) ) ▶₀ #vk.1 )
                        case tag1
                        solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                          case d_0_snd
                          solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                            case Xor
                            solve( !KU( ~r1 ) @ #vk.2 )
                              case reader1
                              SOLVED // trace found
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end